import { GoogleGenerativeAI } from '@google/generative-ai';
import { AIResponse } from '@/types/ai';
import { aiApi } from './ai-api';
import { aiKnowledge, getSystemContext } from './ai-prompts';

// Gemini API configuration with multiple keys for load balancing
const GEMINI_API_KEYS = [
  'AIzaSyDxOtuESZB_IeWBbaB3aljbLV7hDXtGFRY',
  'AIzaSyBW3tywgCWHLL5-0dcPm99WGamY2m_6oqw'
];

// Current key index for rotation
let currentKeyIndex = 0;

// Function to get current API key
const getCurrentApiKey = () => {
  return GEMINI_API_KEYS[currentKeyIndex];
};

// Function to rotate to next API key
const rotateApiKey = () => {
  currentKeyIndex = (currentKeyIndex + 1) % GEMINI_API_KEYS.length;
  console.log(`üîÑ Rotated to API key index: ${currentKeyIndex}`);
};

// Initialize Gemini AI with current key
let genAI = new GoogleGenerativeAI(getCurrentApiKey());
let model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });

// Function to reinitialize model with new API key
const reinitializeModel = () => {
  genAI = new GoogleGenerativeAI(getCurrentApiKey());
  model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });
};

// Function to get API key status
export const getApiKeyStatus = () => {
  return {
    currentKeyIndex,
    totalKeys: GEMINI_API_KEYS.length,
    currentKey: `${getCurrentApiKey().substring(0, 20)}...`,
    availableKeys: GEMINI_API_KEYS.length
  };
};

// Function to manually rotate API key
export const manualRotateApiKey = () => {
  rotateApiKey();
  reinitializeModel();
  return getApiKeyStatus();
};

// Enhanced action types to support automatic navigation
export const parseUserInput = (input: string): { type: string; payload?: any } => {
  const lowerInput = input.toLowerCase().trim();
  
  // Booking confirmation and general agreement responses - ENHANCED
  if (lowerInput.includes('‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£') || 
      lowerInput.includes('‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß') ||
      lowerInput.includes('‡∏ï‡∏Å‡∏•‡∏á') || 
      lowerInput.includes('‡πÇ‡∏≠‡πÄ‡∏Ñ') || 
      lowerInput.includes('ok') ||
      lowerInput.includes('‡πÉ‡∏ä‡πà') ||
      lowerInput.includes('yes') ||
      lowerInput.includes('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô') ||
      lowerInput.includes('‡πÑ‡∏õ‡πÄ‡∏•‡∏¢') ||
      (lowerInput.includes('‡∏à‡∏≠‡∏á') && 
       (lowerInput.includes('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥') || lowerInput.includes('early bird') ||
        lowerInput.includes('‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') || lowerInput.includes('vip') ||
        lowerInput.includes('premium') || lowerInput.includes('‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')))) {
    
    // Extract ticket type if specified
    let ticketType = '';
    if (lowerInput.includes('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥') || lowerInput.includes('regular')) ticketType = 'regular';
    else if (lowerInput.includes('early bird') || lowerInput.includes('‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤')) ticketType = 'earlyBird';
    else if (lowerInput.includes('‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') || lowerInput.includes('student')) ticketType = 'student';
    else if (lowerInput.includes('vip')) ticketType = 'vip';
    else if (lowerInput.includes('premium')) ticketType = 'premium';
    else if (lowerInput.includes('‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ') || lowerInput.includes('general')) ticketType = 'general';
    else if (lowerInput.includes('‡∏Å‡∏•‡∏∏‡πà‡∏°') || lowerInput.includes('group')) ticketType = 'group';
    
    return { type: 'confirm_booking', payload: { ticketType, originalQuery: input } };
  }
  if (lowerInput.includes('‡πÑ‡∏õ‡πÄ‡∏•‡∏¢') || lowerInput.includes('‡∏ï‡∏Å‡∏•‡∏á') || lowerInput.includes('‡πÉ‡∏ä‡πà') || 
      lowerInput.includes('yes') || lowerInput.includes('ok') || lowerInput.includes('‡πÇ‡∏≠‡πÄ‡∏Ñ') ||
      lowerInput === '‡πÑ‡∏õ' || lowerInput === 'go') {
    return { type: 'confirm_navigation' };
  }
  
  // Auto navigation patterns
  if (lowerInput.includes('‡∏û‡∏≤‡πÑ‡∏õ') || lowerInput.includes('‡πÑ‡∏õ') || lowerInput.includes('navigate') || lowerInput.includes('auto')) {
    // Extract event name if mentioned
    const eventNames = [
      'creative photography workshop',
      'jazz festival',
      'food festival',
      'tech summit',
      'art exhibition',
      'music concert',
      'workshop',
      'festival',
      'conference'
    ];
    
    const mentionedEvent = eventNames.find(name => 
      lowerInput.includes(name.toLowerCase()) ||
      input.toLowerCase().includes(name.toLowerCase())
    );
    
    if (lowerInput.includes('‡∏à‡∏≠‡∏á') || lowerInput.includes('booking') || lowerInput.includes('book')) {
      return { type: 'auto_navigate_booking', payload: { eventName: mentionedEvent } };
    }
    
    if (lowerInput.includes('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î') || lowerInput.includes('detail')) {
      return { type: 'auto_navigate_detail', payload: { eventName: mentionedEvent } };
    }
    
    return { type: 'auto_navigate', payload: { eventName: mentionedEvent, destination: lowerInput } };
  }
  
  // Real-time data requests - NEW
  if (lowerInput.includes('‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î') || lowerInput.includes('‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô') || 
      lowerInput.includes('real-time') || lowerInput.includes('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï') ||
      lowerInput.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà') || lowerInput.includes('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä')) {
    return { type: 'force_realtime_update' };
  }
  
  // AI Booking requests - NEW
  if (lowerInput.includes('‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ') || lowerInput.includes('‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≠‡∏á') || 
      lowerInput.includes('‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß') || lowerInput.includes('book for me') ||
      lowerInput.includes('ai ‡∏à‡∏≠‡∏á') || lowerInput.includes('‡∏à‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')) {
    
    // Extract event name if mentioned
    const eventNames = [
      'digital marketing',
      'tech conference', 
      'jazz under the stars',
      'bangkok marathon',
      'cultural heritage',
      'business networking',
      'photography workshop',
      'workshop',
      'conference',
      'concert',
      'marathon',
      'festival',
      'networking'
    ];
    
    const mentionedEvent = eventNames.find(name => 
      lowerInput.includes(name.toLowerCase())
    );
    
    return { type: 'ai_booking_request', payload: { eventName: mentionedEvent, originalQuery: input } };
  }
  
  // Specific booking choices - NEW
  if (lowerInput.includes('‡∏à‡∏≠‡∏á') && 
      (lowerInput.includes('digital marketing') || lowerInput.includes('tech conference') ||
       lowerInput.includes('jazz') || lowerInput.includes('marathon') ||
       lowerInput.includes('cultural') || lowerInput.includes('networking') ||
       lowerInput.includes('photography'))) {
    
    // Extract event name
    let eventName = '';
    if (lowerInput.includes('digital marketing')) eventName = 'Digital Marketing Masterclass';
    else if (lowerInput.includes('tech conference')) eventName = 'Thailand Tech Conference';
    else if (lowerInput.includes('jazz')) eventName = 'Jazz Under the Stars';
    else if (lowerInput.includes('marathon')) eventName = 'Bangkok Marathon';
    else if (lowerInput.includes('cultural')) eventName = 'Thai Cultural Heritage Festival';
    else if (lowerInput.includes('networking')) eventName = 'Bangkok Business Networking Night';
    else if (lowerInput.includes('photography')) eventName = 'Creative Photography Workshop';
    
    return { type: 'specific_event_booking', payload: { eventName, originalQuery: input } };
  }
  if (lowerInput.includes('‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå') || lowerInput.includes('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') || lowerInput.includes('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå') || 
      lowerInput.includes('‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á') || lowerInput.includes('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á') || 
      lowerInput.includes('‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á') || lowerInput.includes('‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á') ||
      lowerInput.includes('event') && (lowerInput.includes('list') || lowerInput.includes('all'))) {
    return { type: 'get_events' };
  }
  
  // Event recommendations
  if (lowerInput.includes('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÑ‡∏´‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à') || lowerInput.includes('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå') || 
      lowerInput.includes('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à') || lowerInput.includes('‡∏á‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à') ||
      lowerInput.includes('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏á‡∏≤‡∏ô') || lowerInput.includes('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏î‡∏µ‡πÜ')) {
    return { type: 'recommend_events' };
  }
  
  if (lowerInput.includes('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå') || lowerInput.startsWith('‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå')) {
    const query = input.replace(/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå|‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå/gi, '').trim();
    return { type: 'search_events', payload: { query } };
  }
  
  // Ticket management
  if (lowerInput.includes('‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') || lowerInput.includes('‡∏î‡∏π‡∏ï‡∏±‡πã‡∏ß') || lowerInput.includes('‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á')) {
    return { type: 'get_tickets' };
  }
  
  // Statistics
  if (lowerInput.includes('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥') || lowerInput.includes('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') || lowerInput.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö')) {
    return { type: 'get_stats' };
  }
  
  // Global search
  if (lowerInput.includes('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤') || lowerInput.includes('‡∏´‡∏≤')) {
    const query = input.replace(/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤|‡∏´‡∏≤/gi, '').trim();
    return { type: 'global_search', payload: { query } };
  }
  
  // Default: treat as general query for Gemini
  return { type: 'general_query', payload: { query: input } };
};

// Function to generate AI response using dynamic system knowledge with API key failover
export const generateAIResponse = async (userInput: string, context?: any): Promise<AIResponse> => {
  let lastError = null;
  let attemptCount = 0;
  const maxAttempts = GEMINI_API_KEYS.length;

  while (attemptCount < maxAttempts) {
    try {
      const action = parseUserInput(userInput);
      
      // Force refresh for critical queries to ensure real-time data
      const forceRefresh = userInput.includes('‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î') || 
                          userInput.includes('‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô') || 
                          userInput.includes('real-time') ||
                          userInput.includes('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï') ||
                          action.type === 'get_stats';
      
      // Update AI knowledge with current system data (with optional force refresh)
      await updateAIKnowledge(context, forceRefresh);
      
      // Add real-time data indicator to context
      const enhancedContext = {
        ...context,
        isRealTimeQuery: forceRefresh,
        lastDataRefresh: new Date().toISOString()
      };
      
      // Handle specific actions
      if (action.type !== 'general_query') {
        return await executeSpecificAction(action, enhancedContext);
      }
      
      // For general queries, use dynamic system knowledge instead of hardcoded prompts
      const systemKnowledge = getSystemContext(enhancedContext, true); // Include event details
      const conversationContext = enhancedContext?.conversationContext || '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤';
      
      // Include real-time data status in the prompt
      const dataFreshnessInfo = forceRefresh 
        ? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å API ‡πÅ‡∏ö‡∏ö real-time ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤'
        : '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö cache ‡πÑ‡∏ß‡πâ';
      
      const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö

${systemKnowledge}

‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${dataFreshnessInfo}

‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: ${conversationContext}

‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°: "${userInput}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ:
1. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ
2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
3. ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
5. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (${dataFreshnessInfo})

‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
`;
      
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Generate contextual suggestions based on current system state
      const suggestions = generateContextualSuggestions(enhancedContext);
      
      return {
        message: text,
        suggestions: suggestions
      };
      
    } catch (error: any) {
      console.error(`Gemini AI Error with key ${currentKeyIndex}:`, error);
      lastError = error;
      
      // If this is a quota/rate limit error or authentication error, try next key
      if (error?.message?.includes('quota') || 
          error?.message?.includes('rate') ||
          error?.message?.includes('QUOTA_EXCEEDED') ||
          error?.message?.includes('RATE_LIMIT_EXCEEDED') ||
          error?.message?.includes('API_KEY_INVALID') ||
          error?.status === 429 ||
          error?.status === 403) {
        
        attemptCount++;
        if (attemptCount < maxAttempts) {
          console.log(`üîÑ API key ${currentKeyIndex} failed, rotating to next key...`);
          rotateApiKey();
          reinitializeModel();
          continue; // Try with next key
        }
      } else {
        // For other errors, don't retry
        break;
      }
    }
  }
  
  // All keys failed or non-retryable error
  console.error('All Gemini API keys failed or non-retryable error:', lastError);
  return {
    message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•']
  };
};

// Update AI knowledge with fresh system data - Enhanced for real-time access
const updateAIKnowledge = async (context?: any, forceRefresh = false): Promise<void> => {
  try {
    // Check if we need to refresh data
    const memory = context?.memory;
    const lastFetch = memory?.lastFetchTime;
    const now = new Date();
    
    // Fetch events with ALL their fields - reduced cache time for more real-time data
    const eventsCacheAge = lastFetch?.events ? now.getTime() - lastFetch.events.getTime() : Infinity;
    const cacheTimeout = forceRefresh ? 0 : 60000; // 1 minute cache instead of 5 minutes, or force refresh
    
    if (!memory?.events || memory.events.length === 0 || eventsCacheAge > cacheTimeout) {
      try {
        console.log('üîÑ Fetching real-time events data from API...');
        const eventsResult = await aiApi.getAllEvents();
        // Update with complete event data including all fields
        aiKnowledge.updateKnowledge({ 
          events: eventsResult.events || [],
        });
        console.log(`‚úÖ Updated AI knowledge with ${eventsResult.events?.length || 0} events from real-time API`);
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to fetch real-time events, using cached data:', error);
        // If fresh data fails, use cached data but warn user
        if (memory?.events) {
          aiKnowledge.updateKnowledge({ events: memory.events });
        }
      }
    } else {
      // Use cached data but note its age
      const cacheAgeMinutes = Math.floor(eventsCacheAge / 60000);
      console.log(`üìã Using cached events data (${cacheAgeMinutes} minutes old)`);
      aiKnowledge.updateKnowledge({ events: memory.events });
    }
    
    // Fetch categories with full details - real-time
    const categoriesCacheAge = lastFetch?.categories ? now.getTime() - lastFetch.categories.getTime() : Infinity;
    if (forceRefresh || categoriesCacheAge > cacheTimeout) {
      try {
        console.log('üîÑ Fetching real-time categories data...');
        const categories = await aiApi.getAllCategories();
        aiKnowledge.updateKnowledge({ categories: categories || [] });
        console.log(`‚úÖ Updated ${categories?.length || 0} categories from real-time API`);
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to fetch real-time categories:', error);
      }
    }
    
    // Update tickets with complete information if user is available - real-time
    if (context?.currentUser?.id) {
      const ticketsCacheAge = lastFetch?.tickets ? now.getTime() - lastFetch.tickets.getTime() : Infinity;
      if (forceRefresh || ticketsCacheAge > cacheTimeout) {
        try {
          console.log('üîÑ Fetching real-time user tickets...');
          const tickets = await aiApi.getUserTickets(context.currentUser.id);
          aiKnowledge.updateKnowledge({ tickets: tickets || [] });
          console.log(`‚úÖ Updated ${tickets?.length || 0} user tickets from real-time API`);
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to fetch real-time tickets:', error);
        }
      }
    }
    
    // Fetch comprehensive system stats if user is admin - real-time
    if (context?.currentUser?.role === 'admin') {
      const statsCacheAge = lastFetch?.systemStats ? now.getTime() - lastFetch.systemStats.getTime() : Infinity;
      if (forceRefresh || statsCacheAge > cacheTimeout) {
        try {
          console.log('üîÑ Fetching real-time system statistics...');
          const [stats, eventStats, bookingStats, revenueStats] = await Promise.all([
            aiApi.getSystemStats(),
            aiApi.getEventStats(),
            aiApi.getBookingStats(),
            aiApi.getRevenueStats()
          ]);
          
          // Combine all statistics with proper typing and real-time data
          const comprehensiveStats = {
            totalEvents: stats.totalEvents || 0,
            activeEvents: stats.activeEvents || 0,
            totalTickets: stats.totalTickets || 0,
            totalRevenue: stats.totalRevenue || revenueStats.totalRevenue || 0,
            totalUsers: stats.totalUsers || 0,
            activeUsers: stats.activeUsers || 0,
            upcomingEvents: 0, // Will be calculated by AIKnowledgeBuilder
            pastEvents: 0, // Will be calculated by AIKnowledgeBuilder
            revenueGrowth: revenueStats.growth,
            lastUpdated: now.toISOString(),
            isRealTime: true,
            ...eventStats,
            ...bookingStats,
          };
          
          aiKnowledge.updateKnowledge({ systemStats: comprehensiveStats });
          console.log('‚úÖ Updated real-time system statistics');
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to fetch real-time stats:', error);
        }
      }
    }
    
    // Update system info
    try {
      const systemInfo = {
        name: 'Event Ticket Management System',
        version: '1.0.0',
        lastUpdated: new Date().toISOString(),
        totalEvents: aiKnowledge.getCurrentKnowledge().events.length
      };
      aiKnowledge.updateKnowledge({ systemInfo });
    } catch (error) {
      console.warn('Failed to update system info:', error);
    }
    
  } catch (error) {
    console.error('Failed to update comprehensive AI knowledge:', error);
  }
};

// Generate contextual suggestions based on system state
const generateContextualSuggestions = (context?: any): string[] => {
  const suggestions: string[] = [];
  const userRole = context?.currentUser?.role;
  const currentKnowledge = aiKnowledge.getCurrentKnowledge();
  
  // Add suggestions based on available data
  if (currentKnowledge.events.length > 0) {
    suggestions.push('‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    
    const upcomingEvents = currentKnowledge.events.filter(
      event => new Date(event.schedule?.startDate || 0) > new Date()
    );
    
    if (upcomingEvents.length > 0) {
      suggestions.push('‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á');
    }
  }
  
  if (currentKnowledge.categories.length > 0) {
    suggestions.push('‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå');
  }
  
  if (context?.currentUser?.id) {
    suggestions.push('‡∏î‡∏π‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô');
  }
  
  if (userRole === 'admin') {
    suggestions.push('‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö');
    suggestions.push('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå');
  }
  
  // Add default suggestions if not enough contextual ones
  if (suggestions.length < 3) {
    suggestions.push('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°');
  }
  
  return suggestions.slice(0, 4); // Return max 4 suggestions
};

// Execute specific actions with dynamic knowledge
const executeSpecificAction = async (action: any, context?: any): Promise<AIResponse> => {
  try {
    const { type, payload } = action;
    const memory = context?.memory;
    
    switch (type) {
      case 'confirm_navigation':
        return await handleNavigationConfirmation(context);
        
      case 'auto_navigate_booking':
      case 'auto_navigate_detail':
      case 'auto_navigate':
        return await handleAutoNavigation(type, payload, context);
        
      case 'force_realtime_update':
        return await handleRealTimeUpdate(context);
        
      case 'ai_booking_request':
        return await handleAIBookingRequest(payload, context);
        
      case 'specific_event_booking':
        return await handleSpecificEventBooking(payload, context);
        
      case 'confirm_booking':
        return await handleBookingConfirmation(payload, context);
          
      case 'get_events':
        // Check if we have cached events data
        let events;
        const cachedEvents = memory?.events;
        const lastFetch = memory?.lastFetchTime?.events;
        const cacheAge = lastFetch ? Date.now() - lastFetch.getTime() : Infinity;
        
        // Use cache if it's less than 5 minutes old
        if (cachedEvents && cachedEvents.length > 0 && cacheAge < 300000) {
          events = { events: cachedEvents };
        } else {
          // Fetch fresh data
          events = await aiApi.getAllEvents(payload?.filters);
        }
        
        const eventCount = events.events?.length || 0;
        
        // Generate natural response based on actual data
        let message;
        if (eventCount === 0) {
          message = '‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞ ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞';
        } else {
          const upcomingCount = events.events?.filter(
            event => new Date(event.schedule?.startDate || 0) > new Date()
          ).length || 0;
          
          message = `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${eventCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞`;
          if (upcomingCount > 0) {
            message += ` ‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á ${upcomingCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
          }
          message += ' ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®';
        }
        
        return {
          message,
          data: events.events,
          suggestions: eventCount > 0 
            ? ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå', '‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥']
            : ['‡∏£‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°']
        };
        
      case 'search_events':
        // Check cache for search results
        let searchResults;
        const cacheKey = `${payload.query}_${JSON.stringify(payload.filters || {})}`;
        const cachedSearch = memory?.searchResults?.[cacheKey];
        
        if (cachedSearch) {
          const now = new Date();
          const expiryTime = new Date(cachedSearch.timestamp.getTime() + cachedSearch.ttl);
          
          if (now < expiryTime) {
            searchResults = { events: cachedSearch.results };
          } else {
            // Cache expired, fetch fresh data
            searchResults = await aiApi.searchEvents(payload.query, payload.filters);
            // Note: Cache update should be handled by the calling context
          }
        } else {
          // No cache, fetch fresh data
          searchResults = await aiApi.searchEvents(payload.query, payload.filters);
          // Note: Cache update should be handled by the calling context
        }
        
        const searchCount = searchResults.events?.length || 0;
        
        // Return simple message with search results for EventPreview component
        return {
          message: `‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${payload.query}" ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${searchCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`,
          data: searchResults.events,
          suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô']
        };
        
      case 'recommend_events':
        // Use cached events data to recommend interesting events
        let recommendEvents;
        const cachedEventsForRecommend = memory?.events;
        
        if (cachedEventsForRecommend && cachedEventsForRecommend.length > 0) {
          // Use cached data
          recommendEvents = { events: cachedEventsForRecommend };
        } else {
          // Fetch fresh data if no cache
          recommendEvents = await aiApi.getAllEvents();
        }
        
        // Select interesting events (featured, upcoming, or popular)
        const interestingEvents = recommendEvents.events?.filter(event => 
          event.featured || 
          event.capacity?.available > 0 ||
          new Date(event.schedule?.startDate) > new Date()
        ).slice(0, 3) || [];
        
        const recommendCount = interestingEvents.length;
        
        return {
          message: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì ${recommendCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‚ú® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`,
          data: interestingEvents,
          suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß', '‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î']
        };
        
      case 'get_tickets':
        const tickets = await aiApi.getUserTickets(payload?.userId);
        const ticketCount = tickets.length;
        
        const ticketsPrompt = `
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß: ${ticketCount} ‡πÉ‡∏ö
‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
`;
        
        const ticketsResult = await model.generateContent(ticketsPrompt);
        const ticketsMessage = await ticketsResult.response.text();
        
        return {
          message: ticketsMessage,
          data: tickets,
          suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡πã‡∏ß', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡πã‡∏ß', '‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà']
        };
        
      case 'get_stats':
        const stats = await aiApi.getSystemStats();
        
        const statsPrompt = `
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
`;
        
        const statsResult = await model.generateContent(statsPrompt);
        const statsMessage = await statsResult.response.text();
        
        return {
          message: statsMessage,
          data: stats,
          suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô']
        };
        
      case 'global_search':
        const globalResults = await aiApi.globalSearch(payload.query);
        
        const globalPrompt = `
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "${payload.query}"
‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
`;
        
        const globalResult = await model.generateContent(globalPrompt);
        const globalMessage = await globalResult.response.text();
        
        return {
          message: globalMessage,
          data: globalResults,
          suggestions: ['‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', '‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà']
        };
        
      default:
        return {
          message: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏Ç‡∏≠ "${type}" ‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞`,
          suggestions: ['‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•']
        };
    }
  } catch (error) {
    console.error('Execute specific action error:', error);
    return {
      message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error instanceof Error ? error.message : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞`,
      suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤']
    };
  }
};

// Handle booking confirmation and proceed to booking page - ENHANCED
const handleBookingConfirmation = async (payload: any, context?: any): Promise<AIResponse> => {
  try {
    console.log('‚úÖ Processing booking confirmation...', payload);
    
    const { ticketType, originalQuery } = payload || {};
    
    // Check if user is authenticated
    if (!context?.currentUser?.id) {
      return {
        message: 'üîê ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏Ñ‡πà‡∏∞ üòä\n\n‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‚ú®',
        suggestions: ['‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', '‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏Å‡πà‡∏≠‡∏ô'],
        action: {
          type: 'navigate',
          payload: { url: '/login' }
        }
      };
    }
    
    // Try to get event info from different context sources
    let eventInfo = null;
    let selectedTicketType = ticketType;
    
    // First check for stored ticket options in context
    const ticketOptions = context?.ticketOptions;
    if (ticketOptions?.event) {
      eventInfo = ticketOptions.event;
    }
    
    // If no ticket options, try to get from booking choices
    if (!eventInfo && context?.bookingChoices?.events?.length > 0) {
      // For now, take the first event - in a real scenario, we'd need better event selection logic
      eventInfo = context.bookingChoices.events[0];
    }
    
    // If still no event, try to find "‡∏´‡∏°‡∏≠‡∏•‡∏≥" event specifically from the conversation context
    if (!eventInfo) {
      console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "‡∏´‡∏°‡∏≠‡∏•‡∏≥" ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤...');
      
      try {
        const events = await aiApi.getAllEvents();
        const allEvents = events.events || [];
        
        // Look for "‡∏´‡∏°‡∏≠‡∏•‡∏≥" event
        eventInfo = allEvents.find(event => 
          event && event.title && 
          (event.title.toLowerCase().includes('‡∏´‡∏°‡∏≠‡∏•‡∏≥') ||
           '‡∏´‡∏°‡∏≠‡∏•‡∏≥'.includes(event.title.toLowerCase()))
        );
        
        // Default to regular ticket if not specified
        if (!selectedTicketType && eventInfo) {
          selectedTicketType = 'regular';
        }
      } catch (error) {
        console.error('Error finding ‡∏´‡∏°‡∏≠‡∏•‡∏≥ event:', error);
      }
    }

    if (!eventInfo) {
      return {
        message: 'üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ üòä',
        suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏´‡∏°‡∏≠‡∏•‡∏≥', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
      };
    }
    
    // Find selected ticket type info
    let selectedTicket = null;
    if (selectedTicketType && eventInfo?.pricing) {
      // Map ticket type to pricing info
      const priceMap = {
        regular: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥',
        earlyBird: '‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Early Bird)',
        student: '‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
        vip: '‡∏ö‡∏±‡∏ï‡∏£ VIP',
        premium: '‡∏ö‡∏±‡∏ï‡∏£ Premium',
        general: '‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        group: '‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°'
      };
      
      const price = eventInfo.pricing[selectedTicketType];
      if (price !== undefined) {
        selectedTicket = {
          type: selectedTicketType,
          label: priceMap[selectedTicketType as keyof typeof priceMap] || selectedTicketType,
          price: price
        };
      }
    }
    
    // Generate confirmation message
    let message = `‚úÖ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üéâüí≥\n\n`;
    message += `üé´ **${eventInfo.title}**\n`;
    
    if (selectedTicket) {
      message += `üé´ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡πã‡∏ß: ${selectedTicket.label}\n`;
      message += `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${selectedTicket.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n`;
    }
    
    message += `‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß üöÄ\n\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\n‚Ä¢ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ üí≥`;
    
    return {
      message,
      data: [eventInfo],
      suggestions: ['‡πÑ‡∏õ‡∏à‡∏≠‡∏á‡πÄ‡∏•‡∏¢', '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô', '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∑‡πà‡∏ô'],
      action: {
        type: 'navigate',
        payload: {
          url: `/events/${eventInfo.id}/booking?payment=true&ticket=${selectedTicketType}`,
          eventId: eventInfo.id,
          preselectedTicketType: selectedTicketType
        }
      }
    };
    
  } catch (error) {
    console.error('Booking confirmation error:', error);
    return {
      message: 'üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞',
      suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
    };
  }
};

// Handle specific event booking with ticket options - NEW FUNCTION
const handleSpecificEventBooking = async (payload: any, context?: any): Promise<AIResponse> => {
  try {
    console.log('üé´ Processing specific event booking...', payload);
    
    const { eventName, originalQuery } = payload || {};
    
    // Find the specific event
    const events = await aiApi.getAllEvents();
    const allEvents = events.events || [];
    
    const targetEvent = allEvents.find(event => 
      event && event.title && 
      (event.title.toLowerCase().includes(eventName.toLowerCase()) ||
       eventName.toLowerCase().includes(event.title.toLowerCase()))
    );
    
    if (!targetEvent) {
      return {
        message: `üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${eventName}" ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä`,
        suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå']
      };
    }
    
    // Check if event is available for booking
    const eventDate = new Date(targetEvent.schedule?.startDate || 0);
    const now = new Date();
    
    if (eventDate <= now) {
      return {
        message: `üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${targetEvent.title}" ‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä`,
        suggestions: ['‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á', '‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå']
      };
    }
    
    if ((targetEvent.capacity?.available || 0) <= 0) {
      return {
        message: `üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${targetEvent.title}" ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ\n\n‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä`,
        suggestions: ['‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á', '‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå']
      };
    }
    
    // Get ticket options from event pricing
    const ticketOptions = [];
    const pricing = targetEvent.pricing || {};
    
    // Map pricing to ticket options with Thai labels
    const priceMap = {
      earlyBird: '‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (Early Bird)',
      regular: '‡∏ö‡∏±‡∏ï‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥',
      student: '‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
      group: '‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°',
      vip: '‡∏ö‡∏±‡∏ï‡∏£ VIP',
      premium: '‡∏ö‡∏±‡∏ï‡∏£ Premium',
      general: '‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      fullMarathon: '‡∏°‡∏≤‡∏£‡∏≤‡∏ò‡∏≠‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á',
      halfMarathon: '‡∏Æ‡∏≤‡∏ü‡∏°‡∏≤‡∏£‡∏≤‡∏ò‡∏≠‡∏ô',
      miniMarathon: '‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≤‡∏£‡∏≤‡∏ò‡∏≠‡∏ô',
      funRun: 'Fun Run',
      adult: '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà',
      child: '‡πÄ‡∏î‡πá‡∏Å',
      senior: '‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏',
      member: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
      free: '‡∏ü‡∏£‡∏µ'
    };
    
    Object.entries(pricing).forEach(([type, price]) => {
      if (typeof price === 'number' && price >= 0 && priceMap[type as keyof typeof priceMap]) {
        ticketOptions.push({
          type,
          label: priceMap[type as keyof typeof priceMap],
          price
        });
      }
    });
    
    // Sort by price
    ticketOptions.sort((a, b) => a.price - b.price);
    
    if (ticketOptions.length === 0) {
      return {
        message: `üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á`,
        suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏á‡∏≤‡∏ô', '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å']
      };
    }
    
    // Generate message with ticket choices
    const formattedEventDate = new Date(targetEvent.schedule?.startDate || 0);
    const formattedDate = formattedEventDate.toLocaleDateString('th-TH', {
      weekday: 'long',
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    let message = `üéâ ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß! ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≠‡∏á üöÄ\n\n`;
    message += `üé´ **${targetEvent.title}**\n`;
    message += `üìÖ ${formattedDate}\n`;
    message += `üìç ${targetEvent.location?.venue || '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'}\n`;
    message += `üé´ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${targetEvent.capacity?.available || 0} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á\n\n`;
    
    message += `üé´ **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡πã‡∏ß:**\n`;
    ticketOptions.forEach((option, index) => {
      message += `${index + 1}. ${option.label} - **${option.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó**\n`;
    });
    
    message += `\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞? ü§î\n\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡πà‡∏∞ ‚ú®`;
    
    // Generate booking suggestions for each ticket type
    const bookingSuggestions = ticketOptions.map(option => 
      `‡∏à‡∏≠‡∏á ${option.label}`
    );
    
    // Add general options
    bookingSuggestions.push('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô');
    
    return {
      message,
      data: [targetEvent],
      suggestions: bookingSuggestions.slice(0, 4),
      action: {
        type: 'show_ticket_options',
        payload: {
          event: targetEvent,
          ticketOptions,
          eventId: targetEvent.id
        }
      }
    };
    
  } catch (error) {
    console.error('Specific event booking error:', error);
    return {
      message: 'üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞',
      suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
    };
  }
};

// Handle AI booking requests with choices - NEW FUNCTION
const handleAIBookingRequest = async (payload: any, context?: any): Promise<AIResponse> => {
  try {
    console.log('ü§ñ Processing AI booking request...', payload);
    
    const { eventName, originalQuery } = payload || {};
    
    // Get available events
    const events = await aiApi.getAllEvents();
    const allEvents = events.events || [];
    
    // Filter events based on query or show upcoming events
    let candidateEvents = allEvents.filter(event => {
      if (!event || !event.title) return false;
      
      // Filter by event name if mentioned
      if (eventName) {
        return event.title.toLowerCase().includes(eventName.toLowerCase()) ||
               eventName.toLowerCase().includes(event.title.toLowerCase());
      }
      
      // Show upcoming events with available seats
      const eventDate = new Date(event.schedule?.startDate || 0);
      const now = new Date();
      return eventDate > now && 
             event.status === 'active' && 
             (event.capacity?.available || 0) > 0;
    });
    
    // Limit to 5 most relevant events
    candidateEvents = candidateEvents.slice(0, 5);
    
    if (candidateEvents.length === 0) {
      return {
        message: `üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ${eventName ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${eventName}"` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'} ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòä`,
        suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå']
      };
    }
    
    // Generate message with event choices
    let message = `üéâ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß üöÄ\n\n`;
    
    if (eventName) {
      message += `‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${eventName}" ‡πÅ‡∏•‡πâ‡∏ß ${candidateEvents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n\n`;
    } else {
      message += `‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ${candidateEvents.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n\n`;
    }
    
    // Add event choices with booking buttons
    candidateEvents.forEach((event, index) => {
      const candidateEventDate = new Date(event.schedule?.startDate || 0);
      const formattedDate = candidateEventDate.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short', 
        year: 'numeric'
      });
      
      const lowestPrice = Math.min(
        ...(Object.values(event.pricing || {}).filter(p => typeof p === 'number' && p > 0) as number[])
      );
      
      message += `üé´ **${event.title}**\n`;
      message += `üìÖ ${formattedDate}\n`;
      message += `üìç ${event.location?.venue || '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'}\n`;
      message += `üí∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ${lowestPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
      message += `üé´ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${event.capacity?.available || 0} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á\n\n`;
    });
    
    message += `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞? ü§î\n\n‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‚ú®`;
    
    // Generate booking suggestions with event names
    const bookingSuggestions = candidateEvents.map(event => 
      `‡∏à‡∏≠‡∏á ${event.title.length > 20 ? event.title.substring(0, 20) + '...' : event.title}`
    );
    
    // Add general suggestions
    bookingSuggestions.push('‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô');
    bookingSuggestions.push('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    
    return {
      message,
      data: candidateEvents,
      suggestions: bookingSuggestions.slice(0, 4), // Limit to 4 suggestions
      action: {
        type: 'show_booking_choices',
        payload: {
          events: candidateEvents,
          originalQuery
        }
      }
    };
    
  } catch (error) {
    console.error('AI booking request error:', error);
    return {
      message: 'üòî ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞',
      suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
    };
  }
};

// Handle real-time data update requests - NEW FUNCTION
const handleRealTimeUpdate = async (context?: any): Promise<AIResponse> => {
  try {
    console.log('üîÑ Processing real-time update request...');
    
    // Force update AI knowledge with real-time data
    await updateAIKnowledge(context, true); // Force refresh
    
    // Get latest statistics
    const stats = await aiApi.getSystemStats();
    const events = await aiApi.getAllEvents();
    
    const eventCount = events.events?.length || 0;
    const activeEvents = events.events?.filter(
      event => new Date(event.schedule?.startDate || 0) > new Date()
    ).length || 0;
    
    const message = `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö real-time ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! üöÄ

üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤):
‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${eventCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á: ${activeEvents} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${stats.totalTickets} ‡πÉ‡∏ö
‚Ä¢ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: ${stats.totalRevenue.toLocaleString()} ‡∏ö‡∏≤‡∏ó

‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üíæ`;
    
    return {
      message,
      data: events.events?.slice(0, 3), // Show latest 3 events
      suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå']
    };
  } catch (error) {
    console.error('Real-time update error:', error);
    return {
      message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üòî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞',
      suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤']
    };
  }
};

// Store pending navigation data in localStorage to persist across navigation
const setPendingNavigation = (data: { url: string; eventId: string; eventTitle: string } | null) => {
  if (data) {
    localStorage.setItem('pendingNavigation', JSON.stringify(data));
  } else {
    localStorage.removeItem('pendingNavigation');
  }
};

const getPendingNavigation = (): { url: string; eventId: string; eventTitle: string } | null => {
  try {
    const data = localStorage.getItem('pendingNavigation');
    return data ? JSON.parse(data) : null;
  } catch {
    return null;
  }
};

// Handle navigation confirmation
const handleNavigationConfirmation = async (context?: any): Promise<AIResponse> => {
  const pendingNavigation = getPendingNavigation();
  
  if (pendingNavigation) {
    const { url, eventId, eventTitle } = pendingNavigation;
    
    // Clear pending navigation
    setPendingNavigation(null);
    
    // Execute the navigation
    const navigationAction = {
      type: 'navigate' as const,
      payload: { 
        url,
        eventId,
        eventTitle
      }
    };
    
    return {
      message: `‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏Ñ‡πà‡∏∞! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á "${eventTitle}" ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞... üöÄ`,
      action: navigationAction,
      suggestions: ['‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß', '‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å']
    };
  } else {
    return {
      message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üòÖ',
      suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
    };
  }
};

// Handle automatic navigation to event pages
const handleAutoNavigation = async (type: string, payload: any, context?: any): Promise<AIResponse> => {
  try {
    const { eventName } = payload || {};
    
    // Get all events to search for the mentioned event
    const events = await aiApi.getAllEvents();
    const allEvents = events.events || [];
    
    // Filter out invalid events (ensure they have required properties)
    const validEvents = allEvents.filter(event => 
      event && 
      typeof event === 'object' && 
      event.id && 
      event.title && 
      typeof event.title === 'string'
    );
    
    let targetEvent = null;
    
    if (eventName) {
      // Search for event by name (case-insensitive) with null checks
      targetEvent = validEvents.find(event => 
        event.title.toLowerCase().includes(eventName.toLowerCase()) ||
        eventName.toLowerCase().includes(event.title.toLowerCase())
      );
    }
    
    // If no specific event found but user wants navigation, show available events
    if (!targetEvent && validEvents.length > 0) {
      // Try to find Creative Photography Workshop specifically with null checks
      targetEvent = validEvents.find(event => 
        event.title.toLowerCase().includes('creative') ||
        event.title.toLowerCase().includes('photography') ||
        event.title.toLowerCase().includes('workshop')
      );
    }
    
    let navigationUrl = '';
    let message = '';
    
    if (targetEvent) {
      // Generate navigation URL based on type
      switch (type) {
        case 'auto_navigate_booking':
          navigationUrl = `/events/${targetEvent.id}/booking`;
          message = `‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${targetEvent.title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! üéâ\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏•‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‚ú®`;
          break;
        case 'auto_navigate_detail':
          navigationUrl = `/events/${targetEvent.id}`;
          message = `‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${targetEvent.title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! üéâ\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üìã`;
          break;
        default:
          navigationUrl = `/events/${targetEvent.id}`;
          message = `‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${targetEvent.title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞! üéâ\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏û‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üéØ`;
      }
      
      // Execute navigation action
      const navigationAction = {
        type: 'navigate' as const,
        payload: { 
          url: navigationUrl,
          eventId: targetEvent.id,
          eventTitle: targetEvent.title
        }
      };
      
      // Store pending navigation for confirmation
      setPendingNavigation({
        url: navigationUrl,
        eventId: targetEvent.id,
        eventTitle: targetEvent.title
      });
      
      return {
        message: message + `\n\nüìç ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÑ‡∏õ‡πÄ‡∏•‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ: ${navigationUrl}`,
        data: [targetEvent],
        suggestions: ['‡πÑ‡∏õ‡πÄ‡∏•‡∏¢', '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å']
      };
    } else {
      // No matching event found
      const availableEvents = validEvents.slice(0, 3); // Show first 3 valid events as alternatives
      
      return {
        message: eventName 
          ? `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå "${eventName}" ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üòî\n\n‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞ ‚ú®`
          : '‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞ ‚ú®',
        data: availableEvents,
        suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']
      };
    }
    
  } catch (error) {
    console.error('Auto navigation error:', error);
    console.error('Error details:', {
      type,
      payload,
      contextKeys: context ? Object.keys(context) : 'no context'
    });
    return {
      message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞ üòÖ',
      suggestions: ['‡∏î‡∏π‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•']
    };
  }
};

export default {
  generateAIResponse,
  parseUserInput
};